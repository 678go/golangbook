syntax = "proto3";
import "page.proto";

package book;
option go_package = "github.com/678go/golangbook/grpc/book";


/*
在进行依赖的protobuf文件生成时，需要先将import里面被依赖的生成后，在生成自己的
protoc -I=. -I=../pb --go_out=. --go_opt=module="github.com/678go/golangbook/grpc/book" \
 --go-grpc_out=. --go-grpc_opt=module="github.com/678go/golangbook/grpc/book" ./book.proto
-I= ../pb 这里存放的就是需要依赖的pb 使用引用的pb文件如下：
//golangbook.678go.page.PageRequest page = 1;
page.PageRequest page = 1;
栗子：golangbook/grpc/book
*/
service Service {
  rpc CreateBook(CreateBookRequest) returns(Book);
  rpc QueryBook(QueryBookRequest) returns(BookSet);
//  rpc DescribeBook(DescribeBookRequest) returns(Book);
//  rpc UpdateBook(UpdateBookRequest) returns(Book);
//  rpc DeleteBook(DeleteBookRequest) returns(Book);
}

enum Catalog {
  TECH = 0;
  EDU = 1;
}

// Book 定了一个book的结构体
message Book {
  // 唯一ID
  // @gotags: json:"id"
  string id = 1;
  // 录入时间
  // @gotags: json:"create_at"
  int64 create_at = 2;
  // 更新时间
  // @gotags: json:"update_at"
  int64 update_at = 3;
  // 更新人
  // @gotags: json:"update_by"
  string update_by = 4;
  // 书本信息
  // @gotags: json:"data"
  CreateBookRequest data = 5;
}

// BookSet todo
message BookSet {
  // 分页时，返回总数量
  // @gotags: json:"total"
  int64 total = 1;
  // 一页的数据
  // @gotags: json:"items"
  repeated Book items = 2;
}

// 在定义message时如下注释的标签是无法自动生成的，需要借助于第三方工具才行
// CreateBookRequest 创建书本信息的结构体
message CreateBookRequest {
  // 创建人
  // @gotags: json:"create_by"
  string create_by = 1;
  // 名称
  // @gotags: json:"name" validate:"required"
  string name = 2;
  // 作者
  // @gotags: json:"author" validate:"required"
  string author = 3;
}

message QueryBookRequest {
  // 分页参数, <package_name>.<message_name>
  // @gotags: json:"page"
  //golangbook.678go.page.PageRequest page = 1;
  page.PageRequest page = 1;
  // 关键字参数
  // @gotags: json:"keywords"
  string keywords = 2;
}